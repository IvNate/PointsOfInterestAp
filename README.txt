Api для работы с точками интереса разработан с помощью фреймворка Symfony 4.3.
Основа проекта - "Symfony skeleton", шаблон проекта, реализующий паттерн MVC.
Версия PHP 7.3.11.
База данных - MySQL (+веб-интерфейс phpMyAdmin).
Работа с базой данных осуществляется с помощью библиотеки Doctrine (работа с объектами базы, а так же изменения структуры базы с помощью миграций). 
Все необходимые пакеты устанавливались с помощью composer.
Запуск осуществлялся из встроенного php сервера.
IDE PhpStorm.

Для развертывания проета необходимо выполнить:
1. "composer install"
2. Обновить строку подключения к базе данных в .env в корне проета.
3. Создать миграцию php "bin/console make:migration"
4. Осуществить миграцию "php bin/console doctrine:migrations:migrate".
5. Запустить проект "symfony serve"

Схема базы данных представлена в файле \DatabaseSchema.png.
Описание методов Api в файле \Description.txt.

Функционал, который я считаю нужным дореализовать в данном проекте:
1. Авторизация.
Во-первых, сама система предполагает, что точка интереса будет связана с конкретным пользователем. И пользователю будут доступны только свои точки интереса. Зачем ему чужие?
Во-вторых, методы API реализуют не весь функционал для работы с данной системой. Уже есть методы, которые должны быть доступны только администратору. Например, добавление новых типов точек интереса, заполнение сведений по городам.

Авторизация может быть реализована с помощью компонента FOSUserBundle.
Основные шаги:
-установка пакета;
-создание класса пользователя (идентификатор, логин, хеш пароля, соль, роль);
-добавление поля "id_пользователя" в таблицу Точек интреса;
-настройка security.yml;
-настройка компонента FOSUserBundle;
-обновление работы методов контроллера, с учетом проверки, что пользователь должен быть авторизован в системе, а также 
	дополнительные фильтры на отправку только точек интереса конкретного авторизованного пользователя
	сохранение точки интереса сразу с указанием пользователя
	возможность изменения точек интереса только привязанных к своему аккаунту
	
2. Логирование
Фреймворк уже ведет логирование основных действий в системе. Но этого недостаточно, чтобы сразу понять по логу, в чем проблема.
Для этого нужно добавить свои более конкретные сообщения об ошибках в уязвимых местах. Например, при выполнении flush, когда конкретные скрипты отправляются на выполнение в базу, могут возникнуть непредвиденные ошибки.

Логирование можно настроить с помощью библиотеки Psr\Log\LoggerInterface и добавления параметра (LoggerInterface $logger) в параметры метода.

3. Настройка ограничения на количество запросов от одного ip.
Необходимо развернуть приложение не на встроенном сервере, а на, например, Apache или Nginx.
И уже на этом сервере сконфигурировать необходимые ограничения по количество запросов. 